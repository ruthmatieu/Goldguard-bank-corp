{"ast":null,"code":"/*import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n//have tha same API interface as Route\n//render a <Route/> and passes all props\n//if logged in, checks if user is authenticated routes to /dashboard otherwise redirects to homepage\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    //if token is in localStorage, render the component\n    return(\n        <Route \n            {...rest}\n            render = {(props) => {\n                if (window.localStorage.getItem('token')) {\n                    console.log('Sucessfully logged in.')\n                    return <Component {...props}/>\n                } else {\n                    console.log('You must login')\n                    return <Redirect to='/error'/>\n                }\n            }}\n        />\n    );\n};\n\nexport default PrivateRoute;\n*/","map":{"version":3,"sources":["/Users/ruthmathieu/Desktop/Lambda School/BW-Unit-3/front-end/src/utils/PrivateRoute.js"],"names":[],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\n\n/*import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n//have tha same API interface as Route\n//render a <Route/> and passes all props\n//if logged in, checks if user is authenticated routes to /dashboard otherwise redirects to homepage\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    //if token is in localStorage, render the component\n    return(\n        <Route \n            {...rest}\n            render = {(props) => {\n                if (window.localStorage.getItem('token')) {\n                    console.log('Sucessfully logged in.')\n                    return <Component {...props}/>\n                } else {\n                    console.log('You must login')\n                    return <Redirect to='/error'/>\n                }\n            }}\n        />\n    );\n};\n\nexport default PrivateRoute;\n*/"]},"metadata":{},"sourceType":"module"}